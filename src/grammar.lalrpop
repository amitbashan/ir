use crate::ir;
use std::str::FromStr;

grammar;

pub Script: ir::Script<'input> = Block* Statement*;

Identifier: ir::Identifier<'input> = r"[a-zA-Z]+[a-zA-Z0-9]*";

Expression: ir::Expression = {
    r"-?[0-9]+" => ir::Expression::Integer(isize::from_str(<>).unwrap()),
}

Statement: ir::Statement<'input> = {
    <p: Identifier> "->" <s: Identifier> <so: ("," Identifier)?> => ir::Statement::Successor(p, (s, so.map(|so| so.1))),
}

Instruction: ir::Instruction<'input> = {
    "const" <t: Identifier> "," <v: Expression> => ir::Instruction::Const { t, v },
    "add" <t: Identifier> "," <l: Identifier> "," <r: Identifier> => ir::Instruction::Add { t, l, r },
    "le" <t: Identifier> "," <l: Identifier> "," <r: Identifier> => ir::Instruction::LessThanOrEqual { t, l, r },
    "tst" <t: Identifier> => ir::Instruction::Test(t),
    "phi" <t: Identifier> "," <l: Identifier> "," <r: Identifier> => ir::Instruction::Phi { t, l, r },
    "ret" <t: Identifier> => ir::Instruction::Return(t),
}

Block: ir::Block<'input> = {
    <i: Identifier> "{" <s: Instruction*> "}" => ir::Block(i, s),
}